use safe_vex::vex_rt::motor::{EncoderUnits, Gearset};
use crate::auto::Auto;

macro_rules! motor_config {
    ($(#[$meta:meta])* $motor:ident: $port:expr, $reverse:expr;) => {
        /// **(motor configuration)**
        ///
        $(#[$meta])*
        pub const $motor: MotorConfig = MotorConfig { port: $port, reverse: $reverse };
    };

    ($(#[$meta:meta])* $motor:ident: $port:expr, $reverse:expr; $($tail:tt)+) => {
        /// **(motor configuration)**
        ///
        $(#[$meta])*
        pub const $motor: MotorConfig = MotorConfig { port: $port, reverse: $reverse };
        motor_config! {
            $($tail)*
        }
    };
}

pub struct Config;
#[derive(Debug, Copy, Clone)]
pub struct MotorConfig {
    pub port: u8,
    pub reverse: bool,
}

/// DriveTrain Configs
impl Config {
    /// The gear ratio of the drive-train's motors
    pub const DRIVE_GEAR_RATIO: Gearset = Gearset::ThirtySixToOne;
    /// The unit used to mreasure the motor
    pub const DRIVE_UNIT: EncoderUnits = EncoderUnits::Degrees;

    motor_config! {
        /// Top-left drive-train motor
        DRIVE_L1: 5, false;
        /// Bottom-left drive-train motor
        DRIVE_L2: 3, false;
        /// Top-right drive-train motor
        DRIVE_R1: 20, true;
        /// Bottom-right drive-train motor
        DRIVE_R2: 16, true;
        
        /// Arm motor
        ARM: 15, true;
    }

    /// the robot's forward speed out of `100`
    pub const DRIVE_FORWARD_SPEED: u8 = 100;
    /// the robot's backward speed out of `100`
    pub const DRIVE_BACKWARD_SPEED: u8 = 90;
    /// the robot's turning speed out of `100`
    pub const DRIVE_TURN_SPEED: u8 = 50;
    /// the robot's strafe speed out of `100`
    pub const DRIVE_STRAFE_SPEED: u8 = 60;
    /// the robot's arm speed out of `100`
    pub const ARM_SPEED: u8 = 100;

    /// The multiplier applied to the voltage in precise mode
    pub const PRECISE_DIVISOR: f64 = 0.2f64;
}

/// Misc Configs
impl Config {
    /// The minimum amount of activation the controller has to have to be activated
    pub const CONTROLLER_STICK_MIN: u8 = 0;
    /// The exponential multiplier for the joysticks
    pub const EXPO_MULTIPLIER: f64 = 1.0004f64;
}

/// Autonomous Algorithms
impl Config {
    // /// Competition Autonomous (before driver control)
    pub const AUTO_COMPETITION: Auto = Auto::new(
        &[(0, 37), (-2147483647, 13), (0, 6), (2147483647, 29), (0, 3), (-2147483647, 29), (0, 8), (-3, 1), (-32405, 1), (-907722259, 5), (0, 12), (-1, 1), (-530, 1), (-68999, 1), (907722259, 4), (0, 11), (-1, 1), (-114159, 1), (-111325944, 1), (0, 8), (-10, 1), (-19586, 2), (0, 4), (-107, 1), (-28, 1), (0, 1), (-1, 2), (0, 2), (-33, 1), (-487, 1), (-39, 1), (0, 3), (-2, 1), (-475422, 1), (0, 5), (-45343, 1), (-907722259, 1), (0, 293), (363088903, 16), (35497, 1), (0, 32), (-13457345, 1), (-326780013, 5), (0, 15), (20922360, 1), (363088903, 10), (0, 2), (-22831, 1), (-326780013, 3), (0, 27), (181544451, 3), (7476303, 1), (0, 8), (-16323, 1), (-326780013, 1), (0, 8), (-2799, 1), (-1951907, 1), (-40068989, 1), (-2308905, 1), (0, 25), (-22831, 1), (-326780013, 1), (0, 8), (864, 1), (20473614, 1), (78419169, 1), (0, 6), (67981, 1), (181544451, 1), (0, 6), (161, 1), (0, 5), (-480, 1), (-73930, 1), (0, 224), (43, 1), (363088903, 12), (0, 36), (-11666, 1), (-326780013, 4), (0, 35), (135962, 1), (363088903, 14), (0, 31), (-290, 1), (-4156029, 1), (-326780013, 5), (-2123560, 1)], 
        &[(0, 37), (2147483647, 13), (0, 6), (-2147483647, 29), (0, 3), (2147483647, 29), (0, 8), (-3, 1), (-32405, 1), (-907722259, 5), (0, 12), (-1, 1), (-530, 1), (-68999, 1), (907722259, 4), (0, 11), (-1, 1), (-114159, 1), (-111325944, 1), (0, 8), (-10, 1), (-19586, 2), (0, 4), (-107, 1), (-28, 1), (0, 1), (-1, 2), (0, 2), (-33, 1), (-487, 1), (-39, 1), (0, 3), (-2, 1), (-475422, 1), (0, 5), (-45343, 1), (-907722259, 1), (0, 293), (363088903, 16), (35497, 1), (0, 32), (-13457345, 1), (-326780013, 5), (0, 15), (20922360, 1), (363088903, 10), (0, 2), (-22831, 1), (-326780013, 3), (0, 27), (181544451, 3), (7476303, 1), (0, 8), (-16323, 1), (-326780013, 1), (0, 8), (-2799, 1), (-1951907, 1), (-40068989, 1), (-2308905, 1), (0, 25), (-22831, 1), (-326780013, 1), (0, 8), (864, 1), (20473614, 1), (78419169, 1), (0, 6), (67981, 1), (181544451, 1), (0, 6), (161, 1), (0, 5), (-480, 1), (-73930, 1), (0, 224), (43, 1), (363088903, 12), (0, 36), (-11666, 1), (-326780013, 4), (0, 35), (135962, 1), (363088903, 14), (0, 31), (-290, 1), (-4156029, 1), (-326780013, 5), (-2123560, 1)], 
        &[(0, 37), (2147483647, 13), (0, 6), (-2147483647, 29), (0, 3), (2147483647, 29), (0, 8), (3, 1), (32405, 1), (907722259, 5), (0, 12), (-1, 1), (-530, 1), (-68999, 1), (-907722259, 4), (0, 11), (-1, 1), (-114159, 1), (-111325944, 1), (0, 8), (10, 1), (19586, 2), (0, 4), (107, 1), (28, 1), (0, 1), (1, 2), (0, 2), (33, 1), (487, 1), (39, 1), (0, 3), (2, 1), (475422, 1), (0, 5), (45343, 1), (907722259, 1), (0, 293), (363088903, 16), (35497, 1), (0, 32), (-13457345, 1), (-326780013, 5), (0, 15), (20922360, 1), (363088903, 10), (0, 2), (-22831, 1), (-326780013, 3), (0, 27), (-181544451, 3), (-7476303, 1), (0, 8), (-16323, 1), (-326780013, 1), (0, 8), (2799, 1), (1951907, 1), (40068989, 1), (2308905, 1), (0, 25), (-22831, 1), (-326780013, 1), (0, 8), (-864, 1), (-20473614, 1), (-78419169, 1), (0, 6), (-67981, 1), (-181544451, 1), (0, 6), (-161, 1), (0, 5), (-480, 1), (-73930, 1), (0, 224), (43, 1), (363088903, 12), (0, 36), (-11666, 1), (-326780013, 4), (0, 35), (135962, 1), (363088903, 14), (0, 31), (-290, 1), (-4156029, 1), (-326780013, 5), (-2123560, 1)], 
        &[(0, 37), (-2147483647, 13), (0, 6), (2147483647, 29), (0, 3), (-2147483647, 29), (0, 8), (3, 1), (32405, 1), (907722259, 5), (0, 12), (-1, 1), (-530, 1), (-68999, 1), (-907722259, 4), (0, 11), (-1, 1), (-114159, 1), (-111325944, 1), (0, 8), (10, 1), (19586, 2), (0, 4), (107, 1), (28, 1), (0, 1), (1, 2), (0, 2), (33, 1), (487, 1), (39, 1), (0, 3), (2, 1), (475422, 1), (0, 5), (45343, 1), (907722259, 1), (0, 293), (363088903, 16), (35497, 1), (0, 32), (-13457345, 1), (-326780013, 5), (0, 15), (20922360, 1), (363088903, 10), (0, 2), (-22831, 1), (-326780013, 3), (0, 27), (-181544451, 3), (-7476303, 1), (0, 8), (-16323, 1), (-326780013, 1), (0, 8), (2799, 1), (1951907, 1), (40068989, 1), (2308905, 1), (0, 25), (-22831, 1), (-326780013, 1), (0, 8), (-864, 1), (-20473614, 1), (-78419169, 1), (0, 6), (-67981, 1), (-181544451, 1), (0, 6), (-161, 1), (0, 5), (-480, 1), (-73930, 1), (0, 224), (43, 1), (363088903, 12), (0, 36), (-11666, 1), (-326780013, 4), (0, 35), (135962, 1), (363088903, 14), (0, 31), (-290, 1), (-4156029, 1), (-326780013, 5), (-2123560, 1)], 
        &[], 
    );
}